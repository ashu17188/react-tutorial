[{"/home/administrator/Work/React_Projects/react-tutorial/src/index.js":"1","/home/administrator/Work/React_Projects/react-tutorial/src/reportWebVitals.js":"2","/home/administrator/Work/React_Projects/react-tutorial/src/App.tsx":"3","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Signup.tsx":"4","/home/administrator/Work/React_Projects/react-tutorial/src/Components/ForgotPassword.tsx":"5","/home/administrator/Work/React_Projects/react-tutorial/src/Components/PrivateRoute.tsx":"6","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Login.tsx":"7","/home/administrator/Work/React_Projects/react-tutorial/src/Components/UpdateProfile.tsx":"8","/home/administrator/Work/React_Projects/react-tutorial/src/contexts/AuthContext.tsx":"9","/home/administrator/Work/React_Projects/react-tutorial/src/firebase.tsx":"10","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Dashboard/Dashboard.tsx":"11","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Dashboard/UserService.tsx":"12","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Calculator/CalculatorMain.tsx":"13","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Calculator/Button/OperationButton.tsx":"14","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Calculator/Button/DigitButton.tsx":"15","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Counter/CounterMain.tsx":"16","/home/administrator/Work/React_Projects/react-tutorial/src/Components/header/HeaderMain.tsx":"17","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Reset_form_with_default_values_and_clear_errors/ResetFormMain.tsx":"18","/home/administrator/Work/React_Projects/react-tutorial/src/Components/StudentInfo/StudentInfoMain.tsx":"19","/home/administrator/Work/React_Projects/react-tutorial/src/store/index.tsx":"20","/home/administrator/Work/React_Projects/react-tutorial/src/hooks/UseNotifyHook.tsx":"21","/home/administrator/Work/React_Projects/react-tutorial/src/store/action.tsx":"22","/home/administrator/Work/React_Projects/react-tutorial/src/store/actionTypes.tsx":"23","/home/administrator/Work/React_Projects/react-tutorial/src/store/reducer.tsx":"24","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Notify/NotifyMain.tsx":"25"},{"size":547,"mtime":1638293902392,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1623581658018,"results":"28","hashOfConfig":"27"},{"size":1575,"mtime":1638715012911,"results":"29","hashOfConfig":"27"},{"size":2057,"mtime":1625936656055,"results":"30","hashOfConfig":"27"},{"size":1683,"mtime":1625936296159,"results":"31","hashOfConfig":"27"},{"size":469,"mtime":1630402241772,"results":"32","hashOfConfig":"27"},{"size":1778,"mtime":1638295195572,"results":"33","hashOfConfig":"27"},{"size":2641,"mtime":1625936675899,"results":"34","hashOfConfig":"27"},{"size":1540,"mtime":1625939555943,"results":"35","hashOfConfig":"27"},{"size":817,"mtime":1623496635336,"results":"36","hashOfConfig":"27"},{"size":2786,"mtime":1638510593871,"results":"37","hashOfConfig":"27"},{"size":576,"mtime":1630484391779,"results":"38","hashOfConfig":"27"},{"size":5945,"mtime":1638098091283,"results":"39","hashOfConfig":"27"},{"size":461,"mtime":1638093671143,"results":"40","hashOfConfig":"27"},{"size":411,"mtime":1638092568019,"results":"41","hashOfConfig":"27"},{"size":1011,"mtime":1638022532226,"results":"42","hashOfConfig":"27"},{"size":603,"mtime":1638714953931,"results":"43","hashOfConfig":"27"},{"size":3728,"mtime":1638446253908,"results":"44","hashOfConfig":"27"},{"size":8785,"mtime":1638532283520,"results":"45","hashOfConfig":"27"},{"size":124,"mtime":1638532764408,"results":"46","hashOfConfig":"27"},{"size":670,"mtime":1638530142576,"results":"47","hashOfConfig":"27"},{"size":212,"mtime":1638530042336,"results":"48","hashOfConfig":"27"},{"size":90,"mtime":1638529981212,"results":"49","hashOfConfig":"27"},{"size":521,"mtime":1638530663848,"results":"50","hashOfConfig":"27"},{"size":691,"mtime":1638532892348,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1lgqbaj",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"61"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"61"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"61"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/home/administrator/Work/React_Projects/react-tutorial/src/index.js",[],["114","115"],"/home/administrator/Work/React_Projects/react-tutorial/src/reportWebVitals.js",[],"/home/administrator/Work/React_Projects/react-tutorial/src/App.tsx",["116"],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Signup.tsx",[],["117","118"],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/ForgotPassword.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/PrivateRoute.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Login.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/UpdateProfile.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/contexts/AuthContext.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/firebase.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Dashboard/Dashboard.tsx",["119","120","121","122"],"import React, { useEffect, useState } from \"react\";\nimport { Card, Button, Alert, ListGroup, Row, Col } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserService } from \"./UserService\";\nimport { User } from \"./Model/User\";\nimport axios from \"axios\";\nimport HeaderMain from \"../header/HeaderMain\";\nimport ResetFormMain from \"../Reset_form_with_default_values_and_clear_errors/ResetFormMain\";\nimport StudentInfoMain from \"../StudentInfo/StudentInfoMain\";\n\nexport default function Dashboard() {\n  const [error, setError] = useState(\"\");\n  const { currentUser, logout } = useAuth();\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  async function handleLogout() {\n    setError(\"\");\n\n    try {\n      await logout();\n      history.push(\"/login\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  }\n\n  const [user, setUser] = useState({ name: \"\", email: \"\" });\n  useEffect(() => {\n    loadUesrById(1);\n  }, []);\n\n  const loadUesrById = async (id: number) => {\n    try {\n      setLoading(true);\n      const res = await axios.get(\n        `https://jsonplaceholder.typicode.com/users/${id}`\n      );\n      setUser({ name: res.data.name, email: res.data.email });\n      setLoading(false);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n  return (\n    <>\n      <HeaderMain />\n      <Row>\n        <Col md={4}>\n          <Card>\n            <Card.Body>\n              <h2 className=\"text-center mb-4\">Profile</h2>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n              <strong>Email:</strong> {currentUser.email}\n              <Link to=\"/update-profile\" className=\"btn btn-primary w-100 mt-3\">\n                Update Profile\n              </Link>\n              <div className=\"w-100 text-center mt-2\">\n                <Button variant=\"link\" onClick={handleLogout}>\n                  Log Out\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={8}>\n          <Card>\n            <Card.Body>\n              <Alert variant=\"primary\">\n                {user.name},{user.email}\n              </Alert>\n              <h2>User's List</h2>\n              <ListGroup>\n                <ListGroup.Item>Cras justo odio</ListGroup.Item>\n                <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n                <ListGroup.Item>Morbi leo risus</ListGroup.Item>\n                <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\n                <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <StudentInfoMain />\n      </Row>\n    </>\n  );\n}\n","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Dashboard/UserService.tsx",["123"],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Calculator/CalculatorMain.tsx",["124"],"import React, { useReducer } from \"react\";\nimport OperationButton from \"./Button/OperationButton\";\nimport DigitButton from \"./Button/DigitButton\";\nimport \"./CalculatorMain.scss\";\nexport enum ACTIONS {\n  ADD_DIGIT,\n  CHOOSE_OPERATION,\n  CLEAR,\n  DELETE_DIGIT,\n  EVALUATE,\n}\n\ninterface State {\n  currentOperand: any;\n  previousOperand: any;\n  operation: any;\n  overwrite?: boolean;\n}\n\nexport interface Action {\n  type: ACTIONS;\n  payload?: any;\n}\n\nconst reducer = (state: State = INITIAL_STATE, action: Action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: action.payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state;\n      }\n      if (payload.digit === \".\" && state.currentOperand === null) {\n        return {\n          ...state,\n          currentOperand: `0.`,\n        };\n      }\n      if (payload.digit === \".\" && state.currentOperand?.includes(\".\")) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n\n    case ACTIONS.CLEAR:\n      return {} as State;\n\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.overwrite === false) return { ...state };\n\n      if (state.currentOperand?.length === 1) {\n        return { ...state, currentOperand: null };\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand?.slice(0, -1),\n      };\n\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: action.payload.operation,\n        };\n      }\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n    default:\n      return state;\n  }\n  return state;\n};\n\nconst evaluate = (state: State) => {\n  const prev = parseFloat(state.previousOperand || \"\");\n  const current = parseFloat(state.currentOperand || \"\");\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = 0;\n\n  switch (state.operation) {\n    case \"+\":\n      computation = prev + current;\n      computation = parseFloat(computation.toFixed(2));\n      break;\n\n    case \"-\":\n      computation = prev - current;\n      computation = parseFloat(computation.toFixed(2));\n      break;\n    case \"*\":\n      computation = prev * current;\n      computation = parseFloat(computation.toFixed(2));\n      break;\n    case \"÷\":\n      computation = prev / current;\n      computation = parseFloat(computation.toFixed(2));\n      break;\n  }\n  return computation.toString();\n};\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-US\", {\n  minimumFractionDigits: 0,\n});\n\nconst formatOperand = (operand: any) => {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split(\".\");\n\n  if (decimal == null) {\n    return INTEGER_FORMATTER.format(parseInt(integer));\n  }\n  return `${INTEGER_FORMATTER.format(parseInt(integer))}.${decimal}`;\n};\nconst INITIAL_STATE: State = {\n  currentOperand: null,\n  previousOperand: null,\n  operation: \"\",\n};\nconst CalculatorMain = () => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {formatOperand(state.previousOperand)}\n          {state.operation}\n        </div>\n        <div className=\"current-operand\">\n          {formatOperand(state.currentOperand)}\n        </div>\n      </div>\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n      >\n        AC\n      </button>\n      <button\n        className=\"button\"\n        onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}\n      >\n        DEL\n      </button>\n      <OperationButton dispatch={dispatch} operation=\"÷\"></OperationButton>\n      <DigitButton dispatch={dispatch} digit=\"1\"></DigitButton>\n      <DigitButton digit=\"2\" dispatch={dispatch}></DigitButton>\n      <DigitButton digit=\"3\" dispatch={dispatch}></DigitButton>\n      <OperationButton operation=\"*\" dispatch={dispatch}></OperationButton>\n      <DigitButton digit=\"4\" dispatch={dispatch}></DigitButton>\n      <DigitButton digit=\"5\" dispatch={dispatch}></DigitButton>\n      <DigitButton digit=\"6\" dispatch={dispatch}></DigitButton>\n      <OperationButton operation=\"+\" dispatch={dispatch}></OperationButton>\n      <DigitButton digit=\"7\" dispatch={dispatch}></DigitButton>\n      <DigitButton digit=\"8\" dispatch={dispatch}></DigitButton>\n      <DigitButton digit=\"9\" dispatch={dispatch}></DigitButton>\n      <OperationButton operation=\"-\" dispatch={dispatch}></OperationButton>\n      <DigitButton digit=\".\" dispatch={dispatch}></DigitButton>\n      <DigitButton digit=\"0\" dispatch={dispatch}></DigitButton>\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n    </div>\n  );\n};\n\nexport default CalculatorMain;\n",["125","126"],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Calculator/Button/OperationButton.tsx",["127"],"import React, { ReducerAction } from \"react\";\nimport { Action, ACTIONS } from \"../CalculatorMain\";\n\nfunction OperationButton(props: {\n  dispatch: React.Dispatch<Action>;\n  operation: String;\n}) {\n  return (\n    <button\n      onClick={() =>\n        props.dispatch({\n          type: ACTIONS.CHOOSE_OPERATION,\n          payload: { operation: props.operation },\n        })\n      }\n    >\n      {props.operation}\n    </button>\n  );\n}\n\nexport default OperationButton;\n","/home/administrator/Work/React_Projects/react-tutorial/src/Components/Calculator/Button/DigitButton.tsx",[],["128","129"],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Counter/CounterMain.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/header/HeaderMain.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Reset_form_with_default_values_and_clear_errors/ResetFormMain.tsx",["130"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\n//Reference: https://jasonwatmore.com/post/2021/09/23/react-hook-form-reset-form-with-default-values-and-clear-errors\n\nconst ResetFormMain = () => {\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is required\"),\n    firstName: Yup.string().required(\"First name is required.\"),\n    lastName: Yup.string().required(\"Last name is required\"),\n  });\n  const formOptions = { resolver: yupResolver(validationSchema) };\n  const { register, handleSubmit, reset, formState } = useForm(formOptions);\n  const { errors } = formState;\n  const [user, setUser] = useState({ title: \"\", firstName: \"\", lastName: \"\" });\n\n  useEffect(() => {\n    setTimeout(\n      () => setUser({ title: \"Mr.\", firstName: \"John\", lastName: \"James\" }),\n      1000\n    );\n  }, []);\n\n  useEffect(() => {\n    reset(user);\n  }, [user]);\n\n  const onSubmit = (data: any) => {\n    alert(\"Success\" + JSON.stringify(data, null, 4));\n  };\n  return (\n    <>\n      <div className=\"card m-3\">\n        <h5 className=\"card-header\">\n          React Hook Form - Reset Form with Default Values Example\n        </h5>\n        <div className=\"card-body\">\n          {user && (\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"form-row\">\n                <div className=\"form-group col\">\n                  <label htmlFor=\"\">Title</label>\n                  <select\n                    id=\"\"\n                    {...register(\"title\")}\n                    className={`form-control ${\n                      errors.title ? \"is-invalid\" : \"\"\n                    }`}\n                  >\n                    <option value=\"\"></option>\n                    <option value=\"Mr\">Mr</option>\n                    <option value=\"Mrs\">Mrs</option>\n                    <option value=\"Miss\">Miss</option>\n                    <option value=\"Ms\">Ms</option>\n                  </select>\n                  <div className=\"invalid-feedback\">\n                    {errors.title?.message}\n                  </div>\n                </div>\n                <div className=\"form-group col-5\">\n                  <label>First Name</label>\n                  <input\n                    type=\"text\"\n                    {...register(\"firstName\")}\n                    className={`form-control ${\n                      errors.firstName ? \"is-invalid\" : \"\"\n                    }`}\n                  />\n                  <div className=\"invalid-feedback\">\n                    {errors.firstName?.message}\n                  </div>\n                </div>\n                <div className=\"form-group col-5\">\n                  <label>Last Name</label>\n                  <input\n                    type=\"text\"\n                    {...register(\"lastName\")}\n                    className={`form-control ${\n                      errors.lastName ? \"is-invalid\" : \"\"\n                    }`}\n                  />\n                  <div className=\"invalid-feedback\">\n                    {errors.lastName?.message}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">\n                  Submit\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => reset()}\n                  className=\"btn btn-secondary\"\n                >\n                  Reset\n                </button>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ResetFormMain;\n",["131","132"],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/StudentInfo/StudentInfoMain.tsx",["133"],"import React, { useEffect } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport { StoreContext } from \"../../store\";\nimport UseNotifyHook from \"../../hooks/UseNotifyHook\";\n\nconst StudentInfoMain = () => {\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is required\"),\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last name is required\"),\n    dob: Yup.string()\n      .required(\"Date of Birth is required\")\n      .matches(\n        /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/,\n        \"Date of Birth must be a valid date in the format YYYY-MM-DD\"\n      ),\n    email: Yup.string().required(\"Email is required\").email(\"Email is invalid\"),\n    password: Yup.string()\n      .min(6, \"Password must be at least 6 characters\")\n      .required(\"Password is required\"),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n      .required(\"Confirm Password is required\"),\n    acceptTerms: Yup.bool().oneOf([true], \"Accept Ts & Cs is required\"),\n  });\n  const formOptions = { resolver: yupResolver(validationSchema) };\n\n  // get functions to build form with useForm() hook\n  const { register, control, handleSubmit, reset, formState, watch } =\n    useForm(formOptions);\n  const { errors } = formState;\n  const { isSubmitting } = formState;\n  const { fields, append, remove } = useFieldArray({\n    name: \"tickets\",\n    control,\n  });\n\n  // watch to enable re-render when ticket number is changed\n  const numberOfTickets = watch(\"numberOfTickets\");\n\n  useEffect(() => {\n    // update field array when ticket number changed\n    const newVal = parseInt(numberOfTickets || 0);\n    const oldVal = fields.length;\n    if (newVal > oldVal) {\n      // append tickets to field array\n      for (let i = oldVal; i < newVal; i++) {\n        append({ name: \"\", email: \"\" });\n      }\n    } else {\n      // remove tickets from field array\n      for (let i = oldVal; i > newVal; i--) {\n        remove(i - 1);\n      }\n    }\n  }, [numberOfTickets]);\n\n  const { notifyUser } = UseNotifyHook(StoreContext);\n\n  function onSubmit(data: any) {\n    // display form data on success\n    alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(data, null, 4));\n    notifyUser(\"Successful  message\");\n    return new Promise<Boolean>((resolve) => {\n      setTimeout(() => {\n        resolve(false);\n      }, 2000);\n    });\n  }\n\n  return (\n    <div className=\"card m-3\">\n      <h5 className=\"card-header\">\n        React Hook Form 7 - Form Validation Example\n      </h5>\n      <div className=\"card-body\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"form-row\">\n            <div className=\"form-group col\">\n              <label>Title</label>\n              <select\n                {...register(\"title\")}\n                className={`form-control ${errors.title ? \"is-invalid\" : \"\"}`}\n              >\n                <option value=\"\"></option>\n                <option value=\"Mr\">Mr</option>\n                <option value=\"Mrs\">Mrs</option>\n                <option value=\"Miss\">Miss</option>\n                <option value=\"Ms\">Ms</option>\n              </select>\n              <div className=\"invalid-feedback\">{errors.title?.message}</div>\n            </div>\n            <div className=\"form-group col-5\">\n              <label>First Name</label>\n              <input\n                type=\"text\"\n                {...register(\"firstName\")}\n                className={`form-control ${\n                  errors.firstName ? \"is-invalid\" : \"\"\n                }`}\n              />\n              <div className=\"invalid-feedback\">\n                {errors.firstName?.message}\n              </div>\n            </div>\n            <div className=\"form-group col-5\">\n              <label>Last Name</label>\n              <input\n                type=\"text\"\n                {...register(\"lastName\")}\n                className={`form-control ${\n                  errors.lastName ? \"is-invalid\" : \"\"\n                }`}\n              />\n              <div className=\"invalid-feedback\">{errors.lastName?.message}</div>\n            </div>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group col\">\n              <label>Date of Birth</label>\n              <input\n                type=\"date\"\n                {...register(\"dob\")}\n                className={`form-control ${errors.dob ? \"is-invalid\" : \"\"}`}\n              />\n              <div className=\"invalid-feedback\">{errors.dob?.message}</div>\n            </div>\n            <div className=\"form-group col\">\n              <label>Email</label>\n              <input\n                type=\"text\"\n                {...register(\"email\")}\n                className={`form-control ${errors.email ? \"is-invalid\" : \"\"}`}\n              />\n              <div className=\"invalid-feedback\">{errors.email?.message}</div>\n            </div>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group col\">\n              <label>Password</label>\n              <input\n                type=\"password\"\n                {...register(\"password\")}\n                className={`form-control ${\n                  errors.password ? \"is-invalid\" : \"\"\n                }`}\n              />\n              <div className=\"invalid-feedback\">{errors.password?.message}</div>\n            </div>\n            <div className=\"form-group col\">\n              <label>Confirm Password</label>\n              <input\n                type=\"password\"\n                {...register(\"confirmPassword\")}\n                className={`form-control ${\n                  errors.confirmPassword ? \"is-invalid\" : \"\"\n                }`}\n              />\n              <div className=\"invalid-feedback\">\n                {errors.confirmPassword?.message}\n              </div>\n            </div>\n          </div>\n          <div className=\"form-group form-check\">\n            <input\n              type=\"checkbox\"\n              {...register(\"acceptTerms\")}\n              id=\"acceptTerms\"\n              className={`form-check-input ${\n                errors.acceptTerms ? \"is-invalid\" : \"\"\n              }`}\n            />\n            <label htmlFor=\"acceptTerms\" className=\"form-check-label\">\n              Accept Terms & Conditions\n            </label>\n            <div className=\"invalid-feedback\">\n              {errors.acceptTerms?.message}\n            </div>\n          </div>\n          {/* <div className=\"form-group\">\n            <label>Number of Tickets</label>\n            <select\n              {...register(\"numberOfTickets\")}\n              className={`form-control ${\n                errors.numberOfTickets ? \"is-invalid\" : \"\"\n              }`}\n            >\n              {[\"\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i) => (\n                <option key={i} value={i}>\n                  {i}\n                </option>\n              ))}\n            </select>\n            {fields.map((item, i) => (\n              <div key={i} className=\"list-group list-group-flush\">\n                <div className=\"list-group-item\">\n                  <h5 className=\"card-title\">Ticket {i + 1}</h5>\n                  <div className=\"form-row\">\n                    <div className=\"form-group col-6\">\n                      <label>Name</label>\n                      <input\n                        {...register(`tickets.${i}.name`)}\n                        type=\"text\"\n                        className={`form-control ${\n                          errors.tickets?.[i]?.name ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      <div className=\"invalid-feedback\">\n                        {errors.tickets?.[i]?.name?.message}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            <div className=\"invalid-feedback\">\n              {errors.numberOfTickets?.message}\n            </div>\n          </div> */}\n          <div className=\"form-group\">\n            {/* <button type=\"submit\" className=\"btn btn-primary mr-1\">\n              Register\n            </button> */}\n            <button disabled={isSubmitting} className=\"btn btn-primary mr-1\">\n              {isSubmitting && (\n                <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n              )}\n              Register\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => reset()}\n              className=\"btn btn-secondary\"\n            >\n              Reset\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StudentInfoMain;\n","/home/administrator/Work/React_Projects/react-tutorial/src/store/index.tsx",["134"],"import React from \"react\";\nimport { INITIAL_STATE } from \"./reducer\";\n\nexport const StoreContext = React.createContext([]);\n","/home/administrator/Work/React_Projects/react-tutorial/src/hooks/UseNotifyHook.tsx",["135","136"],"import React, { Context, useContext } from \"react\";\nimport { clearNotify, updateNotify } from \"../store/action\";\nimport { StoreContext } from \"../store/index\";\n\nconst NOTIFY_TIME = 3000;\n\nconst UseNotifyHook = (StoreContext: Context<any>) => {\n  const [, dispatch] = useContext(StoreContext);\n\n  const clearNotification = () => {\n    setTimeout(() => {\n      dispatch(clearNotify());\n    }, NOTIFY_TIME);\n  };\n  const notifyUser = (message: string, isError = false) => {\n    dispatch(\n      updateNotify({\n        isActive: true,\n        message,\n        isError,\n      })\n    );\n    clearNotification();\n  };\n\n  return { notifyUser };\n};\n\nexport default UseNotifyHook;\n","/home/administrator/Work/React_Projects/react-tutorial/src/store/action.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/store/actionTypes.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/store/reducer.tsx",[],"/home/administrator/Work/React_Projects/react-tutorial/src/Components/Notify/NotifyMain.tsx",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":14,"column":8,"nodeType":"143","messageId":"144","endLine":14,"endColumn":18},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"145","line":5,"column":10,"nodeType":"143","messageId":"144","endLine":5,"endColumn":21},{"ruleId":"141","severity":1,"message":"146","line":6,"column":10,"nodeType":"143","messageId":"144","endLine":6,"endColumn":14},{"ruleId":"141","severity":1,"message":"147","line":9,"column":8,"nodeType":"143","messageId":"144","endLine":9,"endColumn":21},{"ruleId":"141","severity":1,"message":"148","line":16,"column":10,"nodeType":"143","messageId":"144","endLine":16,"endColumn":17},{"ruleId":"149","severity":1,"message":"150","line":15,"column":6,"nodeType":"151","endLine":15,"endColumn":14,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":117,"column":3,"nodeType":"155","messageId":"156","endLine":117,"endColumn":16},{"ruleId":"137","replacedBy":"157"},{"ruleId":"139","replacedBy":"158"},{"ruleId":"141","severity":1,"message":"159","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":30},{"ruleId":"137","replacedBy":"160"},{"ruleId":"139","replacedBy":"161"},{"ruleId":"149","severity":1,"message":"162","line":28,"column":6,"nodeType":"151","endLine":28,"endColumn":12,"suggestions":"163"},{"ruleId":"137","replacedBy":"164"},{"ruleId":"139","replacedBy":"165"},{"ruleId":"149","severity":1,"message":"166","line":58,"column":6,"nodeType":"151","endLine":58,"endColumn":23,"suggestions":"167"},{"ruleId":"141","severity":1,"message":"168","line":2,"column":10,"nodeType":"143","messageId":"144","endLine":2,"endColumn":23},{"ruleId":"141","severity":1,"message":"169","line":1,"column":8,"nodeType":"143","messageId":"144","endLine":1,"endColumn":13},{"ruleId":"141","severity":1,"message":"170","line":3,"column":10,"nodeType":"143","messageId":"144","endLine":3,"endColumn":22},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"@typescript-eslint/no-unused-vars","'NotifyMain' is defined but never used.","Identifier","unusedVar","'UserService' is defined but never used.","'User' is defined but never used.","'ResetFormMain' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.","ArrayExpression",["173"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode",["171"],["172"],"'ReducerAction' is defined but never used.",["171"],["172"],"React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["174"],["171"],["172"],"React Hook useEffect has missing dependencies: 'append', 'fields.length', and 'remove'. Either include them or remove the dependency array.",["175"],"'INITIAL_STATE' is defined but never used.","'React' is defined but never used.","'StoreContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [fetchUser, userId]",{"range":"182","text":"183"},"Update the dependencies array to be: [reset, user]",{"range":"184","text":"185"},"Update the dependencies array to be: [append, fields.length, numberOfTickets, remove]",{"range":"186","text":"187"},[441,449],"[fetchUser, userId]",[1005,1011],"[reset, user]",[2156,2173],"[append, fields.length, numberOfTickets, remove]"]